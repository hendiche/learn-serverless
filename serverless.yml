# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: test-serverless-restapi
app: test-serverless-restapi
org: hendi

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:ap-northeast-1:172830017779:table/hendi-test-serverless-restapi-products
        - arn:aws:dynamodb:ap-northeast-1:172830017779:table/hendi-test-serverless-restapi-buyers
  environment:
    DB_PRODUCT: ${self:resources.Resources.productTable.Properties.TableName}
    DB_BUYER: ${self:resources.Resources.buyerTable.Properties.TableName}

# you can overwrite defaults here
  stage: dev
  region: ap-northeast-1
  profile: hendi-test-serverless

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
  product_create:
    handler: handler.create
    events:
      - http:
          path: product
          method: POST
  product_read:
    handler: handler.read
    events:
      - http:
          path: product/{_id}/{sku}
          method: GET
  product_all:
    handler: handler.readAll
    events:
      - http:
          path: product/list
          method: GET
  product_update:
    handler: handler.update
    events:
      - http:
          path: product/{_id}/{sku}
          method: PUT
  product_delete:
    handler: handler.delete
    events:
      - http:
          path: product/{_id}/{sku}
          method: DELETE
  newBuyer: # or purchase
    handler: handler.newBuyer
    events:
      - http:
          path: buyer
          method: POST
  invoices:
    handler: handler.invoices
    events:
      - http: 
          path: invoices
          method: GET

# you can add CloudFormation resource templates here
resources:
  Resources:
    productTable: ${file(./resources/dynamodb/product.yml):productTable}
    buyerTable: ${file(./resources/dynamodb/buyer.yml):buyerTable}

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
